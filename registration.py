# -*- coding: utf-8 -*-
import os
import config
import logging
import datetime

from User import User
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
user_form = User()

# —Ñ–æ—Ä–º–∞ –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Form(StatesGroup):
    value = State()


class Gender_Form(StatesGroup):
    gender = State()

@dp.message_handler(commands='begin')
async def start(message: types.Message):
    keyboard = types.inline_keyboard.InlineKeyboardMarkup(resize_keyboard=True)
    reg_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registration')
    keyboard.add(reg_button)
    photo = open('./pic/start.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo)
    await bot.send_message(message.from_user.id, text="""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
    
–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–æ–±–æ—Ç—É –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç.
    
–†–æ–±–æ—Ç –±—É–¥–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∞—Ä—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞!""",
    reply_markup=keyboard)


# –û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –∏–º—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
@dp.message_handler(state=Form.value)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['value'] = message.text
    
    await Form.next()
    user_form.name = data['value']
    print(user_form)
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    male_button = types.InlineKeyboardButton('–Ø –º—É–∂—á–∏–Ω–∞, –∏—â—É –∂–µ–Ω—â–∏–Ω—É', callback_data='male')
    female_button = types.InlineKeyboardButton('–Ø –∂–µ–Ω—â–∏–Ω–∞, –∏—â—É –º—É–∂—á–∏–Ω—É', callback_data='female')
    other_button = types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='other')
    keyboard.add(male_button, female_button, other_button)
    await bot.send_message(message.chat.id, text="üü¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª –∏ –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ:", reply_markup=keyboard)


@dp.callback_query_handler(text='registration')
async def show_registration(message: types.Message):
    reg_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    reg_start_button = types.InlineKeyboardButton('‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data='registration_start')
    reg_keyboard.add(reg_start_button)
    await bot.send_message(message.from_user.id, text="""–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤–∑—è—Ç—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
–û—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —Ç—Ä–∏ —ç—Ç–∞–ø–∞:
‚û°Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ª–∏—á–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞.
‚û°Ô∏è –¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —Ñ–µ–Ω–æ—Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.
‚û°Ô∏è –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.
        
–í—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 3-5 –º–∏–Ω—É—Ç.""", reply_markup=reg_keyboard)


@dp.callback_query_handler(text='registration_start')
async def show_registration_start(message: types.Message):
    await Form.value.set()
    await bot.send_message(message.from_user.id, """–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!

–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã.

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∑–≤–∏—â–∞ –∏ –Ω–∏–∫–Ω–µ–π–º—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ.    
    """)


@dp.callback_query_handler(text='male')
async def show_male_menu(message: types.Message):
    await bot.send_message(message.from_user.id, 'inside male')


@dp.callback_query_handler(text='female')
async def show_female_menu(message: types.Message):
    await bot.send_message(message.from_user.id, 'inside female')


@dp.callback_query_handler(text='other')
async def show_other(message: types.Message):
    await bot.send_message(message.from_user.id, 'WHAT THE F*CK ARE U?!')

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
