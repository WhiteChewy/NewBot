# -*- coding: utf-8 -*-
import config
import logging

from User import User
from texts import ABOUT, WELCOME, UNIQUENESS, \
                  IMPRINT, CONCEPT, PHOTO, \
                  FIND, INVESTORS, JOURNALISTS, \
                  USER_AGREEMENT1, USER_AGREEMENT2, USER_AGREEMENT3
from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
user_form = User()

# —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç
@dp.message_handler(commands='start')
async def show_starting_menu(message: types.Message):
    photo = open('./pic/start.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo)
    starting_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='register')
    about_project_button = types.InlineKeyboardButton('‚ÑπÔ∏è –ß–∏—Ç–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–µ', callback_data='back')
    starting_inline_keyboard.add(registration_button)
    starting_inline_keyboard.add(about_project_button)
    await bot.send_message(message.from_user.id, text=WELCOME)
    await bot.send_message(message.from_user.id, text='–ù–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?', reply_markup=starting_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
@dp.callback_query_handler(text='about')
async def show_about_text(message: types.Message):
    about_keyboard = types.InlineKeyboardMarkup(resize_keyboard = True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
    about_keyboard.add(registration_button)
    about_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=ABOUT, reply_markup=about_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
@dp.callback_query_handler(text='uniqueness')
async def show_uniqueness(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEGWz5jatRbDYvJEbfafTUQe_0WBegfIAACygEAAiryOgd8lWEmSYCDFCsE')
    uniqueness_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
    uniqueness_inline_keyboard.add(registration_button)
    uniqueness_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=UNIQUENESS, reply_markup=uniqueness_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–º–ø—Ä–∏–Ω—Ç–∏–Ω–≥–µ
@dp.callback_query_handler(text='imprint')
async def show_imprint(message: types.Message):
    imprint_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
    imprint_inline_keyboard.add(registration_button)
    imprint_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=IMPRINT, reply_markup=imprint_inline_keyboard)
            
# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
@dp.callback_query_handler(text='user_agreement')
async def show_user_agreement(message: types.Message):
    user_agreement_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
    user_agreement_keyboard.add(registration_button)
    user_agreement_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=USER_AGREEMENT1)
    await bot.send_message(message.from_user.id, text=USER_AGREEMENT2)
    await bot.send_message(message.from_user.id, text=USER_AGREEMENT3, reply_markup=user_agreement_keyboard)

# –º–µ–Ω—é —á–∞—Å—Ç–æ –∑–∞–¥–æ–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(text='faq')
async def show_faq(message: types.Message):
    faq_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    concept_button = types.InlineKeyboardButton('üìä–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞', callback_data='concept')
    photo_button = types.InlineKeyboardButton('üñº–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='photo')
    find_button = types.InlineKeyboardButton('üíë–ü–æ–∏—Å–∫ –ø–∞—Ä—ã –∏ –æ–ø–ª–∞—Ç–∞', callback_data='find')
    investors_button = types.InlineKeyboardButton('üìà–ü–∞—Ä—Ç–Ω–µ—Ä—ã –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã', callback_data='investors')
    journalist_button = types.InlineKeyboardButton('üìù–î–ª—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤', callback_data='journalists')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back')
    faq_inline_keyboard.row(concept_button, photo_button)
    faq_inline_keyboard.row(find_button, investors_button)
    faq_inline_keyboard.row(journalist_button, back_button)
    await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ.', reply_markup=faq_inline_keyboard)

# –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(text='register')
async def show_register(message: types.Message):
    await bot.send_message(message.from_user.id, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å—é–¥–∞ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è.')

# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text='back')
async def show_back(message: types.Message):
    start_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard = True)
    about_button = types.InlineKeyboardButton('üßæ–û –ø—Ä–æ–µ–∫—Ç–µ', callback_data='about')
    uniqueness_button = types.InlineKeyboardButton('üîÆ–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å', callback_data='uniqueness')
    imprinting_button = types.InlineKeyboardButton('üí°–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–º–ø—Ä–∏–Ω—Ç–∏–Ω–≥', callback_data='imprint')
    start_inline_keyboard.row(about_button, uniqueness_button, imprinting_button)
    user_agreement_button = types.InlineKeyboardButton('üìù–°–æ–≥–ª–∞—à–µ–Ω–∏–µ', callback_data='user_agreement')
    faq_button = types.InlineKeyboardButton('‚ùì–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='faq')
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='register')
    start_inline_keyboard.row(user_agreement_button, faq_button, registration_button)
    await bot.send_message(message.from_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —É–∑–Ω–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.', reply_markup=start_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ–ø—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
@dp.callback_query_handler(text='concept')
async def show_concept(message: types.Message):
    back_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='faq')
    back_inline_keyboard.add(registration_button)
    back_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=CONCEPT, reply_markup=back_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
@dp.callback_query_handler(text='photo')
async def show_photo(message: types.Message):
    photo_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='faq')
    photo_inline_keyboard.add(registration_button)
    photo_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text= PHOTO, reply_markup=photo_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–∞—Ö –∏ –æ–ø–ª–∞—Ç–∞—Ö —É—Å–ª—É–≥
@dp.callback_query_handler(text='find')
async def show_find(message: types.Message):
    find_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='faq')
    find_inline_keyboard.add(registration_button)
    find_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=FIND, reply_markup=find_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
@dp.callback_query_handler(text='investors')
async def show_investors(message: types.Message):
    investors_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='faq')
    investors_inline_keyboard.add(registration_button)
    investors_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=INVESTORS, reply_markup=investors_inline_keyboard)

# —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤
@dp.callback_query_handler(text='journalists')
async def show_journalists(message: types.Message):
    journalists_inline_keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    registration_button = types.InlineKeyboardButton('‚úÖ–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='registr')
    back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='faq')
    journalists_inline_keyboard.add(registration_button)
    journalists_inline_keyboard.add(back_button)
    await bot.send_message(message.from_user.id, text=JOURNALISTS, reply_markup=journalists_inline_keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
